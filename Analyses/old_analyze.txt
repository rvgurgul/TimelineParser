

def analyze(criterion, limit=None, categorization=None, constraints=None, progress_reports=True):
    if categorization is None:
        results = []
    else:
        results = {}

    data_directory = os.listdir(root)

    if progress_reports:
        print("Analyzing, please wait...")
        print("0%", " "*21, "25%", " "*22, "50%", " "*22, "75%", " "*21, "100%", sep="", end="\n|")
        count, prev_percent, constrained_out = 0, 0, 0
        if limit is None:
            limit = len(data_directory)

    for filename in data_directory:
        try:
            file = open(root + filename, "r")
            lines = "".join([line.strip() for line in file.readlines()])
            file.close()
            jason = json.loads(lines)
        except FileNotFoundError:
            print("Problematic File?\t", filename)

        if progress_reports:
            count += 1
            percent = 100*count//limit
            if percent > prev_percent:
                prev_percent = percent
                print("|", end="")
            if count >= limit:
                break

        try:
            within_constraints = constraints is None or constraints(jason)
            if not within_constraints:
                if progress_reports:
                    constrained_out += 1
                continue
        except:
            print(jason["uuid"], "caused an error in the constraint function")

        try:
            result = criterion(jason)
            if result is not None:
                if categorization is None:
                    results.append(result)
                else:
                    try:
                        cat = categorization(jason)
                        if cat in results:
                            results[cat].append(result)
                        else:
                            results[cat] = [result]
                    except:
                        print(jason["uuid"], "caused an error in the categorization function")
        except:
            print(jason["uuid"], "caused error in the criteria function")

    if progress_reports:
        print()
        if constrained_out > 0:
            percent = round(100*constrained_out/limit, 2)
            print(constrained_out, " games did not satisfy constraints. (", percent, "%)", sep="")
            percent = round(100-percent, 2)
            print(count-constrained_out, " games satisfied constraints. (", percent, "%)", sep="")

    return results



# from datetime import datetime
# before = datetime.now()
# after = datetime.now()
